// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter_template_app/json/Author.dart';
import 'package:flutter_template_app/generated/json/Author.g.dart';
import 'package:flutter_template_app/json/MapInfo.dart';
import 'package:flutter_template_app/generated/json/MapInfo.g.dart';
import 'package:flutter_template_app/json/author2_entity.dart';
import 'package:flutter_template_app/generated/json/author2_entity.g.dart';

JsonConvert jsonConvert = JsonConvert();

class JsonConvert {

  T? convert<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    return asT<T>(value);
  }

  List<T?>? convertList<T>(List? value) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((e) => asT<T>(e)).toList();
    } catch (e, stackTrace) {
      print('asT<$T> $e $stackTrace');
      return [];
    }
  }

  List<T>? convertListNotNull<T>(List? value) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((e) => asT<T>(e)!).toList();
    } catch (e, stackTrace) {
      print('asT<$T> $e $stackTrace');
      return [];
    }
  }
  T? asT<T extends Object?>(dynamic value) {
    if (value is T) {
      return value;
    }
		String type = T.toString();
    try {
      final String valueS = value.toString();
      if (type == "String") {
        return valueS as T;
      } else if (type == "int") {
        return int.parse(valueS) as T;
      } else if (type == "double") {
        return double.parse(valueS) as T;
      } else if (type ==  "DateTime") {
        return DateTime.parse(valueS) as T;
      } else if (type ==  "bool") {
        if (valueS == '0' || valueS == '1') {
          return (valueS == '1') as T;
        }
        return (valueS == 'true') as T;
      } else {
        return JsonConvert.fromJsonAsT<T>(value);
      }
    } catch (e, stackTrace) {
      print('asT<$T> $e $stackTrace');
      return null;
    }
  } 
	//Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (Author).toString()){
			return Author.fromJson(json);
		}
		if(type == (MapInfo).toString()){
			return MapInfo.fromJson(json);
		}
		if(type == (DataBean).toString()){
			return DataBean.fromJson(json);
		}
		if(type == (ProjectsBean).toString()){
			return ProjectsBean.fromJson(json);
		}
		if(type == (MapInfoBeanX).toString()){
			return MapInfoBeanX.fromJson(json);
		}
		if(type == (MapInfoBean).toString()){
			return MapInfoBean.fromJson(json);
		}
		if(type == (ObstaclesBeanX).toString()){
			return ObstaclesBeanX.fromJson(json);
		}
		if(type == (ObstaclesBean).toString()){
			return ObstaclesBean.fromJson(json);
		}
		if(type == (PositionsBeanX).toString()){
			return PositionsBeanX.fromJson(json);
		}
		if(type == (PositionsBean).toString()){
			return PositionsBean.fromJson(json);
		}
		if(type == (PositionBean).toString()){
			return PositionBean.fromJson(json);
		}
		if(type == (ProjectInfoBean).toString()){
			return ProjectInfoBean.fromJson(json);
		}
		if(type == (ScriptsBeanX).toString()){
			return ScriptsBeanX.fromJson(json);
		}
		if(type == (ScriptsBean).toString()){
			return ScriptsBean.fromJson(json);
		}
		if(type == (Author2Entity).toString()){
			return Author2Entity.fromJson(json);
		}

		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<Author>[] is M){
			return data.map<Author>((e) => Author.fromJson(e)).toList() as M;
		}
		if(<MapInfo>[] is M){
			return data.map<MapInfo>((e) => MapInfo.fromJson(e)).toList() as M;
		}
		if(<DataBean>[] is M){
			return data.map<DataBean>((e) => DataBean.fromJson(e)).toList() as M;
		}
		if(<ProjectsBean>[] is M){
			return data.map<ProjectsBean>((e) => ProjectsBean.fromJson(e)).toList() as M;
		}
		if(<MapInfoBeanX>[] is M){
			return data.map<MapInfoBeanX>((e) => MapInfoBeanX.fromJson(e)).toList() as M;
		}
		if(<MapInfoBean>[] is M){
			return data.map<MapInfoBean>((e) => MapInfoBean.fromJson(e)).toList() as M;
		}
		if(<ObstaclesBeanX>[] is M){
			return data.map<ObstaclesBeanX>((e) => ObstaclesBeanX.fromJson(e)).toList() as M;
		}
		if(<ObstaclesBean>[] is M){
			return data.map<ObstaclesBean>((e) => ObstaclesBean.fromJson(e)).toList() as M;
		}
		if(<PositionsBeanX>[] is M){
			return data.map<PositionsBeanX>((e) => PositionsBeanX.fromJson(e)).toList() as M;
		}
		if(<PositionsBean>[] is M){
			return data.map<PositionsBean>((e) => PositionsBean.fromJson(e)).toList() as M;
		}
		if(<PositionBean>[] is M){
			return data.map<PositionBean>((e) => PositionBean.fromJson(e)).toList() as M;
		}
		if(<ProjectInfoBean>[] is M){
			return data.map<ProjectInfoBean>((e) => ProjectInfoBean.fromJson(e)).toList() as M;
		}
		if(<ScriptsBeanX>[] is M){
			return data.map<ScriptsBeanX>((e) => ScriptsBeanX.fromJson(e)).toList() as M;
		}
		if(<ScriptsBean>[] is M){
			return data.map<ScriptsBean>((e) => ScriptsBean.fromJson(e)).toList() as M;
		}
		if(<Author2Entity>[] is M){
			return data.map<Author2Entity>((e) => Author2Entity.fromJson(e)).toList() as M;
		}

		throw Exception("not found");
	}

  static M fromJsonAsT<M>(json) {
		if (json is List) {
			return _getListChildType<M>(json);
		} else {
			return _fromJsonSingle<M>(json) as M;
		}
	}
}